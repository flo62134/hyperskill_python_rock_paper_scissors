type: edu
custom_name: stage5
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class RPSTest(StageTest):
        def generate(self) -> List[TestCase]:
            cases = ["Tim\nrock,gun,lightning,devil,dragon,water,air,paper,sponge,wolf,tree,human,snake,scissors,fire\nrock\npaper\npaper\n!rating\n!exit",
                     "Tim\nrock,paper,scissors\nrock\n!exit",
                     "Tim\nrock,gun,lightning,devil,dragon,water,air,paper,sponge,wolf,tree,human,snake,scissors,fire\nrock\nrock\nrock\nrock\n!exit",
                     "Tim\n\nrock\nrock\nrock\navada_kedavra\nrock\n!exit",
                     "Tim\n1,2,3,4,5\n1\n1\n2\n3\n4\n5\n!exit"]
            return [TestCase(stdin=case, attach=case, files={'rating.txt': 'Tim 1350\nJane 200\nAlex 400'})
                    for case in cases]

        def check(self, reply: str, attach) -> CheckResult:

            if "Okay" not in reply:
                return CheckResult.wrong(
                    "There is no \"Okay, let's start\" message in this test"
                )

            reply = [r for r in reply.split("\n") if len(r) != 0]
            attach = attach.split("\n")

            if len(reply) == 0:
                return CheckResult.wrong(
                    "Looks like you didn't output anything!"
                )



            rating = 1350
            self.options = (attach[1] or "rock,paper,scissors").split(",")
            for rep in range(len(reply)):
                reply_part = reply[rep]
                try:
                    attach_part = attach[rep]
                    if attach_part == "!exit" or \
                            "Hello" in reply_part or \
                            "Okay" in reply_part or "Bye!" in reply_part:
                        continue
                    if attach_part == "!rating":
                        if reply_part.split(":")[-1].strip() != str(rating):
                            return CheckResult.wrong("User rating is wrong :(")
                        continue
                    elif "Sorry" in reply_part:
                        result = -1
                        option = reply_part.split()[-1]
                    elif "draw" in reply_part:
                        result = 0
                        if '(' not in reply_part or ')' not in reply_part:
                            return CheckResult.wrong(
                                "There are no '(' or ')' character when there is a draw"
                            )
                        start = reply_part.index('(')
                        end = reply_part.index(')')
                        option = reply_part[start + 1: end]
                        rating += 50
                    elif "Well" in reply_part:
                        result = 1
                        option = reply_part.split()[-3]
                        rating += 100
                    elif "Invalid input" in reply_part:
                        result = 2
                        if attach_part in self.options:
                            return CheckResult.wrong(
                                'Looks like you output "Invalid input" '
                                'in the wrong place'
                            )
                    else:
                        raise IndexError

                    if attach_part not in self.options:
                        if result == 2:
                            res = True
                        else:
                            return CheckResult.wrong(
                                "Looks like you didn't handle an invalid input correctly"
                            )
                    else:
                        res = self.solve(result, attach_part.strip(), option.strip())

                    if res is False:
                        return CheckResult.wrong(
                            "You chose " + attach_part + ", "
                            "computer chose " + option + '. '
                            'And the answer was \"' + reply_part + '\". '
                            'That\'s wrong reply'
                        )

                    if res < 0:
                        raise IndexError
                except IndexError:
                    return CheckResult.wrong("Seems like your answer (\"{}\") does not fit in given templates".format(reply_part))
            return CheckResult.correct()

        def solve(self, result, *options):
            if any(opt not in self.options for opt in options):
                return -1
            diff = self.options.index(options[0]) - self.options.index(options[1])
            if not diff:
                true_result = 0
            else:
                true_result = (-1) ** ((abs(diff) - (len(self.options) // 2) > 0) == (diff > 0))
            return true_result == result

    if __name__ == '__main__':
        RPSTest("rps.game").run_tests()
  learner_created: false
- name: rps/game.py
  visible: true
  text: |
    # Write your code here
    import random
    import os

    USER_GREETING = 'Hello, {0}'

    SCORE_FILE = 'rating.txt'

    INVALID_INPUT = 'Invalid input'

    EXIT = '!exit'
    RATING = '!rating'
    ROCK = 'rock'
    PAPER = 'paper'
    SCISSORS = 'scissors'
    PLAYS = [ROCK, PAPER, SCISSORS]
    OPTIONS = [ROCK, PAPER, SCISSORS, EXIT, RATING]

    ASK_USERNAME = 'Enter your name:'
    LOSE = 'Sorry, but computer chose {0}'
    LOSE_SCORE = 0
    DRAW = 'There is a draw ({0})'
    DRAW_SCORE = 50
    WIN = 'Well done. Computer chose {0} and failed'
    WIN_SCORE = 100
    YOUR_RATING = "Your rating: {0}"
    END = 'Bye!'


    def get_computer_winning_play(user_play: str):
        if user_play == ROCK:
            return PAPER
        elif user_play == PAPER:
            return SCISSORS
        else:
            return ROCK


    def get_round_state(user_play: str, computer_play: str):
        winning_play = get_computer_winning_play(user_play)

        if user_play == computer_play:
            return DRAW

        return LOSE if computer_play == winning_play else WIN


    def format_round_state(state: str, computer_play: str):
        return state.format(computer_play)


    def play_round(user_play: str):
        computer_play = random.choice(PLAYS)
        round_state = get_round_state(user_play, computer_play)
        print(format_round_state(round_state, computer_play))

        return round_state


    def is_valid_word(word: str):
        return word in OPTIONS


    def ask_username():
        return input(ASK_USERNAME)


    def greet_player(username: str):
        print(USER_GREETING.format(username))


    def get_user_score(username: str):
        if os.path.exists(SCORE_FILE):
            file = open(SCORE_FILE, 'rt')
            score = 0

            for line in file:
                line_username = line.split()[0]
                line_score = line.split()[1]
                if line_username == username:
                    score = line_score

            return score
        else:
            return 0


    def display_score(score: int):
        score = str(score)
        print(YOUR_RATING.format(score))


    def apply_round_score(current_score: int, round_state: str):
        if round_state == WIN:
            round_score = 100
        elif round_state == DRAW:
            round_score = 50
        else:
            round_score = 0

        return current_score + round_score


    user_play = ''
    username = ask_username()
    greet_player(username)
    score = get_user_score(username)

    while user_play != EXIT:
        user_play = input()
        is_valid = is_valid_word(user_play)
        if not is_valid:
            print(INVALID_INPUT)
            continue

        if user_play == RATING:
            display_score(score)
            continue

        if user_play in PLAYS:
            round_state = play_round(user_play)
            score = apply_round_score(score, round_state)

    print(END)
  learner_created: true
feedback_link: https://hyperskill.org/projects/78/stages/435/implement
status: Solved
record: -1
